<launch>
    <arg name="use_sim_time" default="true" doc="Uses simulated time and publishes on /clock."/>
    <arg name="gazebo_ui" default="true" doc="Launches the Gazebo UI."/>
    <arg name="debug" default="false" doc="Starts gazebo debugging with gdb."/>
    <arg name="fixed" default="true" doc="Fixes the exoskeleton in the world"/>
    <arg name="ground_gait" default="false" doc="Exoskeleton will ground gait if true."/>
    <arg name="obstacle" default="none" doc="Obstacle to load in the simulation."/>

    <arg name="robot" default="march4" doc="Robot to use."/>
    <arg name="robot_description" default="$(arg robot)" doc="URDF file to use"/>
    <arg name="controller_type" default="effort_control" doc="Changes the controller used by simulation."/>
    <arg name="controller_name" default="$(arg robot)" doc="Name of the controller"/>
    <arg name="realsense_simulation" default="true"
         doc="Whether the simulation camera or the physical camera should be used"/>

    <!-- Disable all plugins that are not used by the physical realsense camera. -->
    <!-- The compressedDepth plugin has to be turned off to prevent errors when -->
    <!-- using the bridge. -->
    <group ns="/camera/color/image_raw" >
      <rosparam param="disable_pub_plugins">
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
        - 'image_transport/compressed'
      </rosparam>
    </group>
    <group ns="/camera/infra1/image_raw" >
      <rosparam param="disable_pub_plugins">
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
        - 'image_transport/compressed'
      </rosparam>
    </group>
    <group ns="/camera/infra2/image_raw" >
      <rosparam param="disable_pub_plugins">
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
        - 'image_transport/compressed'
      </rosparam>
    </group>
    <group ns="/camera/depth/image_raw" >
      <rosparam param="disable_pub_plugins">
        - 'image_transport/compressedDepth'
        - 'image_transport/theora'
        - 'image_transport/compressed'
      </rosparam>
    </group>


    <!-- Load the URDF into the ROS Parameter Server -->
    <!-- Override effort values as Gazebo uses different units than the actual IMC. -->
    <!-- In theory, if the controller is properly tuned, these values can be arbitrarily large. -->
    <!-- However, to limit the safety controller, we need to limit them. -->
    <param name="robot_description"
           command="$(find xacro)/xacro '$(find march_description)/urdf/$(arg robot_description).xacro'
                    k_velocity_value_hfe:=60.0 k_velocity_value_kfe:=60.0
                    k_velocity_value_haa:=60.0 k_velocity_value_adpf:=15.0
                    k_position_value_hfe:=5000.0 k_position_value_kfe:=5000.0
                    k_position_value_haa:=5000.0 k_position_value_adpf:=5000.0
                    max_effort_rotary:=200.0 max_effort_linear:=200.0
                    ground_gait:=$(arg ground_gait)
                    realsense_simulation:=$(arg realsense_simulation)" />

    <!-- Upload the controller configuration -->
    <rosparam file="$(find march_simulation)/config/$(arg controller_type)/$(arg controller_name).yaml" command="load"/>

    <group ns="march">
        <node name="controller_spawner" pkg="controller_manager" type="controller_manager"
              respawn="false" output="screen"
              args="spawn controller/trajectory joint_state_controller"/>

        <node name="upload_joint_names" pkg="march_simulation" type="upload_joint_names"/>
        <node name="set_obstacle_node" pkg="march_simulation" type="set_obstacle_dimensions"/>

    </group>

    <group>
        <!-- We resume the logic in empty_world.launch_sm, changing only the name of the world to be launched -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
            <arg name="world_name" value="$(find march_simulation)/worlds/march.world"/>
            <arg name="debug" value="$(arg debug)" />
            <arg name="gui" value="$(arg gazebo_ui)" />
            <arg name="paused" value="false"/>
            <arg name="use_sim_time" value="$(arg use_sim_time)"/>
            <arg name="verbose" value="true" />
        </include>

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false"
          args="-urdf -model march -param robot_description"/>
    </group>



    <group if="$(eval obstacle != 'none')">
        <param name="model_description"
           command="$(find xacro)/xacro '$(find march_simulation)/obstacles/$(arg obstacle).xacro'" />

        <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
        <node name="model_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false"
          args="-urdf -model $(arg obstacle) -param model_description"/>
    </group>
</launch>
