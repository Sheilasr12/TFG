;; Auto-generated. Do not edit!


(when (boundp 'march_shared_msgs::JointValues)
  (if (not (find-package "MARCH_SHARED_MSGS"))
    (make-package "MARCH_SHARED_MSGS"))
  (shadow 'JointValues (find-package "MARCH_SHARED_MSGS")))
(unless (find-package "MARCH_SHARED_MSGS::JOINTVALUES")
  (make-package "MARCH_SHARED_MSGS::JOINTVALUES"))

(in-package "ROS")
;;//! \htmlinclude JointValues.msg.html
(if (not (find-package "CONTROL_MSGS"))
  (ros::roseus-add-msgs "control_msgs"))


(defclass march_shared_msgs::JointValues
  :super ros::object
  :slots (_controller_output _velocities _accelerations _jerks ))

(defmethod march_shared_msgs::JointValues
  (:init
   (&key
    ((:controller_output __controller_output) (instance control_msgs::FollowJointTrajectoryFeedback :init))
    ((:velocities __velocities) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:accelerations __accelerations) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:jerks __jerks) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _controller_output __controller_output)
   (setq _velocities __velocities)
   (setq _accelerations __accelerations)
   (setq _jerks __jerks)
   self)
  (:controller_output
   (&rest __controller_output)
   (if (keywordp (car __controller_output))
       (send* _controller_output __controller_output)
     (progn
       (if __controller_output (setq _controller_output (car __controller_output)))
       _controller_output)))
  (:velocities
   (&optional __velocities)
   (if __velocities (setq _velocities __velocities)) _velocities)
  (:accelerations
   (&optional __accelerations)
   (if __accelerations (setq _accelerations __accelerations)) _accelerations)
  (:jerks
   (&optional __jerks)
   (if __jerks (setq _jerks __jerks)) _jerks)
  (:serialization-length
   ()
   (+
    ;; control_msgs/FollowJointTrajectoryFeedback _controller_output
    (send _controller_output :serialization-length)
    ;; float64[] _velocities
    (* 8    (length _velocities)) 4
    ;; float64[] _accelerations
    (* 8    (length _accelerations)) 4
    ;; float64[] _jerks
    (* 8    (length _jerks)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; control_msgs/FollowJointTrajectoryFeedback _controller_output
       (send _controller_output :serialize s)
     ;; float64[] _velocities
     (write-long (length _velocities) s)
     (dotimes (i (length _velocities))
       (sys::poke (elt _velocities i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[] _accelerations
     (write-long (length _accelerations) s)
     (dotimes (i (length _accelerations))
       (sys::poke (elt _accelerations i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; float64[] _jerks
     (write-long (length _jerks) s)
     (dotimes (i (length _jerks))
       (sys::poke (elt _jerks i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; control_msgs/FollowJointTrajectoryFeedback _controller_output
     (send _controller_output :deserialize buf ptr-) (incf ptr- (send _controller_output :serialization-length))
   ;; float64[] _velocities
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _velocities (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _velocities i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64[] _accelerations
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _accelerations (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _accelerations i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; float64[] _jerks
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _jerks (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _jerks i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;;
   self)
  )

(setf (get march_shared_msgs::JointValues :md5sum-) "8c2d87ce75da8d6f89c63a524cb72481")
(setf (get march_shared_msgs::JointValues :datatype-) "march_shared_msgs/JointValues")
(setf (get march_shared_msgs::JointValues :definition-)
      "control_msgs/FollowJointTrajectoryFeedback controller_output
float64[] velocities
float64[] accelerations
float64[] jerks

================================================================================
MSG: control_msgs/FollowJointTrajectoryFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
Header header
string[] joint_names
trajectory_msgs/JointTrajectoryPoint desired
trajectory_msgs/JointTrajectoryPoint actual
trajectory_msgs/JointTrajectoryPoint error


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

")



(provide :march_shared_msgs/JointValues "8c2d87ce75da8d6f89c63a524cb72481")


