# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from march_shared_msgs/PowerDistributionBoardState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import march_shared_msgs.msg
import std_msgs.msg

class PowerDistributionBoardState(genpy.Message):
  _md5sum = "2ff720814f62ef92954d191a316aeaf3"
  _type = "march_shared_msgs/PowerDistributionBoardState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
bool high_voltage_enabled

# The current consumed by the power distribution board.
float32 power_distribution_board_current

# The total current of all high voltage nets combined.
float32 high_voltage_net_current

# The request of the power distribution board to shutdown the master.
bool master_shutdown_requested

LowVoltageNet[] low_voltage_nets
HighVoltageNet[] high_voltage_nets


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: march_shared_msgs/LowVoltageNet
#used in message PowerDistributionBoardState
string name
bool operational
float32 current

================================================================================
MSG: march_shared_msgs/HighVoltageNet
#used in message PowerDistributionBoardState
string name
bool operational
bool overcurrent_triggered
"""
  __slots__ = ['header','high_voltage_enabled','power_distribution_board_current','high_voltage_net_current','master_shutdown_requested','low_voltage_nets','high_voltage_nets']
  _slot_types = ['std_msgs/Header','bool','float32','float32','bool','march_shared_msgs/LowVoltageNet[]','march_shared_msgs/HighVoltageNet[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,high_voltage_enabled,power_distribution_board_current,high_voltage_net_current,master_shutdown_requested,low_voltage_nets,high_voltage_nets

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PowerDistributionBoardState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.high_voltage_enabled is None:
        self.high_voltage_enabled = False
      if self.power_distribution_board_current is None:
        self.power_distribution_board_current = 0.
      if self.high_voltage_net_current is None:
        self.high_voltage_net_current = 0.
      if self.master_shutdown_requested is None:
        self.master_shutdown_requested = False
      if self.low_voltage_nets is None:
        self.low_voltage_nets = []
      if self.high_voltage_nets is None:
        self.high_voltage_nets = []
    else:
      self.header = std_msgs.msg.Header()
      self.high_voltage_enabled = False
      self.power_distribution_board_current = 0.
      self.high_voltage_net_current = 0.
      self.master_shutdown_requested = False
      self.low_voltage_nets = []
      self.high_voltage_nets = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2fB().pack(_x.high_voltage_enabled, _x.power_distribution_board_current, _x.high_voltage_net_current, _x.master_shutdown_requested))
      length = len(self.low_voltage_nets)
      buff.write(_struct_I.pack(length))
      for val1 in self.low_voltage_nets:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.operational, _x.current))
      length = len(self.high_voltage_nets)
      buff.write(_struct_I.pack(length))
      for val1 in self.high_voltage_nets:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.operational, _x.overcurrent_triggered))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.low_voltage_nets is None:
        self.low_voltage_nets = None
      if self.high_voltage_nets is None:
        self.high_voltage_nets = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.high_voltage_enabled, _x.power_distribution_board_current, _x.high_voltage_net_current, _x.master_shutdown_requested,) = _get_struct_B2fB().unpack(str[start:end])
      self.high_voltage_enabled = bool(self.high_voltage_enabled)
      self.master_shutdown_requested = bool(self.master_shutdown_requested)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.low_voltage_nets = []
      for i in range(0, length):
        val1 = march_shared_msgs.msg.LowVoltageNet()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.operational, _x.current,) = _get_struct_Bf().unpack(str[start:end])
        val1.operational = bool(val1.operational)
        self.low_voltage_nets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.high_voltage_nets = []
      for i in range(0, length):
        val1 = march_shared_msgs.msg.HighVoltageNet()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.operational, _x.overcurrent_triggered,) = _get_struct_2B().unpack(str[start:end])
        val1.operational = bool(val1.operational)
        val1.overcurrent_triggered = bool(val1.overcurrent_triggered)
        self.high_voltage_nets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B2fB().pack(_x.high_voltage_enabled, _x.power_distribution_board_current, _x.high_voltage_net_current, _x.master_shutdown_requested))
      length = len(self.low_voltage_nets)
      buff.write(_struct_I.pack(length))
      for val1 in self.low_voltage_nets:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_Bf().pack(_x.operational, _x.current))
      length = len(self.high_voltage_nets)
      buff.write(_struct_I.pack(length))
      for val1 in self.high_voltage_nets:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B().pack(_x.operational, _x.overcurrent_triggered))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.low_voltage_nets is None:
        self.low_voltage_nets = None
      if self.high_voltage_nets is None:
        self.high_voltage_nets = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 10
      (_x.high_voltage_enabled, _x.power_distribution_board_current, _x.high_voltage_net_current, _x.master_shutdown_requested,) = _get_struct_B2fB().unpack(str[start:end])
      self.high_voltage_enabled = bool(self.high_voltage_enabled)
      self.master_shutdown_requested = bool(self.master_shutdown_requested)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.low_voltage_nets = []
      for i in range(0, length):
        val1 = march_shared_msgs.msg.LowVoltageNet()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 5
        (_x.operational, _x.current,) = _get_struct_Bf().unpack(str[start:end])
        val1.operational = bool(val1.operational)
        self.low_voltage_nets.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.high_voltage_nets = []
      for i in range(0, length):
        val1 = march_shared_msgs.msg.HighVoltageNet()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 2
        (_x.operational, _x.overcurrent_triggered,) = _get_struct_2B().unpack(str[start:end])
        val1.operational = bool(val1.operational)
        val1.overcurrent_triggered = bool(val1.overcurrent_triggered)
        self.high_voltage_nets.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2fB = None
def _get_struct_B2fB():
    global _struct_B2fB
    if _struct_B2fB is None:
        _struct_B2fB = struct.Struct("<B2fB")
    return _struct_B2fB
_struct_Bf = None
def _get_struct_Bf():
    global _struct_Bf
    if _struct_Bf is None:
        _struct_Bf = struct.Struct("<Bf")
    return _struct_Bf
