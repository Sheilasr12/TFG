// Generated by gencpp from file march_shared_msgs/LowVoltageNet.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_LOWVOLTAGENET_H
#define MARCH_SHARED_MSGS_MESSAGE_LOWVOLTAGENET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct LowVoltageNet_
{
  typedef LowVoltageNet_<ContainerAllocator> Type;

  LowVoltageNet_()
    : name()
    , operational(false)
    , current(0.0)  {
    }
  LowVoltageNet_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , operational(false)
    , current(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _operational_type;
  _operational_type operational;

   typedef float _current_type;
  _current_type current;





  typedef boost::shared_ptr< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> const> ConstPtr;

}; // struct LowVoltageNet_

typedef ::march_shared_msgs::LowVoltageNet_<std::allocator<void> > LowVoltageNet;

typedef boost::shared_ptr< ::march_shared_msgs::LowVoltageNet > LowVoltageNetPtr;
typedef boost::shared_ptr< ::march_shared_msgs::LowVoltageNet const> LowVoltageNetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator1> & lhs, const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.operational == rhs.operational &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator1> & lhs, const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85f3bad605c5adef233dbc869c206dff";
  }

  static const char* value(const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85f3bad605c5adefULL;
  static const uint64_t static_value2 = 0x233dbc869c206dffULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/LowVoltageNet";
  }

  static const char* value(const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#used in message PowerDistributionBoardState\n"
"string name\n"
"bool operational\n"
"float32 current\n"
;
  }

  static const char* value(const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.operational);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LowVoltageNet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::LowVoltageNet_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "operational: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.operational);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_LOWVOLTAGENET_H
