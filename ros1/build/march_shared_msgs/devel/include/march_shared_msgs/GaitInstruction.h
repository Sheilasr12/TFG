// Generated by gencpp from file march_shared_msgs/GaitInstruction.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_GAITINSTRUCTION_H
#define MARCH_SHARED_MSGS_MESSAGE_GAITINSTRUCTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct GaitInstruction_
{
  typedef GaitInstruction_<ContainerAllocator> Type;

  GaitInstruction_()
    : header()
    , type(0)
    , gait_name()
    , id()  {
    }
  GaitInstruction_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , gait_name(_alloc)
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gait_name_type;
  _gait_name_type gait_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(GAIT)
  #undef GAIT
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(CONTINUE)
  #undef CONTINUE
#endif
#if defined(_WIN32) && defined(INCREMENT_STEP_SIZE)
  #undef INCREMENT_STEP_SIZE
#endif
#if defined(_WIN32) && defined(DECREMENT_STEP_SIZE)
  #undef DECREMENT_STEP_SIZE
#endif

  enum {
    UNKNOWN = -1,
    STOP = 0,
    GAIT = 1,
    PAUSE = 2,
    CONTINUE = 3,
    INCREMENT_STEP_SIZE = 4,
    DECREMENT_STEP_SIZE = 5,
  };


  typedef boost::shared_ptr< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> const> ConstPtr;

}; // struct GaitInstruction_

typedef ::march_shared_msgs::GaitInstruction_<std::allocator<void> > GaitInstruction;

typedef boost::shared_ptr< ::march_shared_msgs::GaitInstruction > GaitInstructionPtr;
typedef boost::shared_ptr< ::march_shared_msgs::GaitInstruction const> GaitInstructionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::GaitInstruction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::GaitInstruction_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GaitInstruction_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.gait_name == rhs.gait_name &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::GaitInstruction_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GaitInstruction_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f6950a3a79440fadfc00e50e0e09c76";
  }

  static const char* value(const ::march_shared_msgs::GaitInstruction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f6950a3a79440faULL;
  static const uint64_t static_value2 = 0xdfc00e50e0e09c76ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/GaitInstruction";
  }

  static const char* value(const ::march_shared_msgs::GaitInstruction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# The type of instruction.\n"
"int8 type\n"
"\n"
"# All possible instruction types.\n"
"int8 UNKNOWN = -1\n"
"int8 STOP = 0\n"
"int8 GAIT = 1\n"
"int8 PAUSE = 2\n"
"int8 CONTINUE = 3\n"
"int8 INCREMENT_STEP_SIZE = 4\n"
"int8 DECREMENT_STEP_SIZE = 5\n"
"\n"
"# If the type is a GAIT this is the name of the gait.\n"
"string gait_name\n"
"\n"
"# Unique identifier for the input device sending this message. See `Alive`.\n"
"string id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::march_shared_msgs::GaitInstruction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.gait_name);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GaitInstruction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::GaitInstruction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::GaitInstruction_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "gait_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gait_name);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_GAITINSTRUCTION_H
