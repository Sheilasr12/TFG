// Generated by gencpp from file march_shared_msgs/SetObstacleSizeRampLikeRequest.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_SETOBSTACLESIZERAMPLIKEREQUEST_H
#define MARCH_SHARED_MSGS_MESSAGE_SETOBSTACLESIZERAMPLIKEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct SetObstacleSizeRampLikeRequest_
{
  typedef SetObstacleSizeRampLikeRequest_<ContainerAllocator> Type;

  SetObstacleSizeRampLikeRequest_()
    : obstacle_name()
    , new_slope_up(0.0)
    , new_slope_down(0.0)
    , new_ramp_up_length(0.0)  {
    }
  SetObstacleSizeRampLikeRequest_(const ContainerAllocator& _alloc)
    : obstacle_name(_alloc)
    , new_slope_up(0.0)
    , new_slope_down(0.0)
    , new_ramp_up_length(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _obstacle_name_type;
  _obstacle_name_type obstacle_name;

   typedef double _new_slope_up_type;
  _new_slope_up_type new_slope_up;

   typedef double _new_slope_down_type;
  _new_slope_down_type new_slope_down;

   typedef double _new_ramp_up_length_type;
  _new_ramp_up_length_type new_ramp_up_length;





  typedef boost::shared_ptr< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetObstacleSizeRampLikeRequest_

typedef ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<std::allocator<void> > SetObstacleSizeRampLikeRequest;

typedef boost::shared_ptr< ::march_shared_msgs::SetObstacleSizeRampLikeRequest > SetObstacleSizeRampLikeRequestPtr;
typedef boost::shared_ptr< ::march_shared_msgs::SetObstacleSizeRampLikeRequest const> SetObstacleSizeRampLikeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator1> & lhs, const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_name == rhs.obstacle_name &&
    lhs.new_slope_up == rhs.new_slope_up &&
    lhs.new_slope_down == rhs.new_slope_down &&
    lhs.new_ramp_up_length == rhs.new_ramp_up_length;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator1> & lhs, const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ea9952cd7bffd0375af80cea7910020";
  }

  static const char* value(const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ea9952cd7bffd03ULL;
  static const uint64_t static_value2 = 0x75af80cea7910020ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/SetObstacleSizeRampLikeRequest";
  }

  static const char* value(const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string obstacle_name\n"
"\n"
"float64 new_slope_up         # 0 (default value) means default size will be used, this value is defined in the <obstacle>_macro.xacro file\n"
"float64 new_slope_down       # 0 (default value)\n"
"float64 new_ramp_up_length   # 0 (default value)\n"
;
  }

  static const char* value(const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_name);
      stream.next(m.new_slope_up);
      stream.next(m.new_slope_down);
      stream.next(m.new_ramp_up_length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetObstacleSizeRampLikeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::SetObstacleSizeRampLikeRequest_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.obstacle_name);
    s << indent << "new_slope_up: ";
    Printer<double>::stream(s, indent + "  ", v.new_slope_up);
    s << indent << "new_slope_down: ";
    Printer<double>::stream(s, indent + "  ", v.new_slope_down);
    s << indent << "new_ramp_up_length: ";
    Printer<double>::stream(s, indent + "  ", v.new_ramp_up_length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_SETOBSTACLESIZERAMPLIKEREQUEST_H
