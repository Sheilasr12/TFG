// Generated by gencpp from file march_shared_msgs/GaitInstructionResponse.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_GAITINSTRUCTIONRESPONSE_H
#define MARCH_SHARED_MSGS_MESSAGE_GAITINSTRUCTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct GaitInstructionResponse_
{
  typedef GaitInstructionResponse_<ContainerAllocator> Type;

  GaitInstructionResponse_()
    : result(0)  {
    }
  GaitInstructionResponse_(const ContainerAllocator& _alloc)
    : result(0)  {
  (void)_alloc;
    }



   typedef int8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(GAIT_REJECTED)
  #undef GAIT_REJECTED
#endif
#if defined(_WIN32) && defined(GAIT_ACCEPTED)
  #undef GAIT_ACCEPTED
#endif
#if defined(_WIN32) && defined(GAIT_FINISHED)
  #undef GAIT_FINISHED
#endif

  enum {
    GAIT_REJECTED = -1,
    GAIT_ACCEPTED = 0,
    GAIT_FINISHED = 1,
  };


  typedef boost::shared_ptr< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GaitInstructionResponse_

typedef ::march_shared_msgs::GaitInstructionResponse_<std::allocator<void> > GaitInstructionResponse;

typedef boost::shared_ptr< ::march_shared_msgs::GaitInstructionResponse > GaitInstructionResponsePtr;
typedef boost::shared_ptr< ::march_shared_msgs::GaitInstructionResponse const> GaitInstructionResponseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a9a7173d5945f6df13f205af2597eb4";
  }

  static const char* value(const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a9a7173d5945f6dULL;
  static const uint64_t static_value2 = 0xf13f205af2597eb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/GaitInstructionResponse";
  }

  static const char* value(const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The result of the instruction\n"
"int8 result\n"
"\n"
"# The possible results\n"
"int8 GAIT_REJECTED = -1\n"
"int8 GAIT_ACCEPTED = 0\n"
"int8 GAIT_FINISHED = 1\n"
;
  }

  static const char* value(const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GaitInstructionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::GaitInstructionResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_GAITINSTRUCTIONRESPONSE_H
