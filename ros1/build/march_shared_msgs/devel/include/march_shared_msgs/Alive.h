// Generated by gencpp from file march_shared_msgs/Alive.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_ALIVE_H
#define MARCH_SHARED_MSGS_MESSAGE_ALIVE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct Alive_
{
  typedef Alive_<ContainerAllocator> Type;

  Alive_()
    : stamp()
    , id()  {
    }
  Alive_(const ContainerAllocator& _alloc)
    : stamp()
    , id(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;





  typedef boost::shared_ptr< ::march_shared_msgs::Alive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::Alive_<ContainerAllocator> const> ConstPtr;

}; // struct Alive_

typedef ::march_shared_msgs::Alive_<std::allocator<void> > Alive;

typedef boost::shared_ptr< ::march_shared_msgs::Alive > AlivePtr;
typedef boost::shared_ptr< ::march_shared_msgs::Alive const> AliveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::Alive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::Alive_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::Alive_<ContainerAllocator1> & lhs, const ::march_shared_msgs::Alive_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::Alive_<ContainerAllocator1> & lhs, const ::march_shared_msgs::Alive_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::Alive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::Alive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::Alive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::Alive_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::Alive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::Alive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::Alive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "302881f31927c1df708a2dbab0e80ee8";
  }

  static const char* value(const ::march_shared_msgs::Alive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x302881f31927c1dfULL;
  static const uint64_t static_value2 = 0x708a2dbab0e80ee8ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::Alive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/Alive";
  }

  static const char* value(const ::march_shared_msgs::Alive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::Alive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message type that is used by input devices to signal they are still alive.\n"
"\n"
"# Timestamp at which the input device was last alive\n"
"time stamp\n"
"\n"
"# Unique identifier used to identify an input device when connection has been lost.\n"
"# The id should be readable and you should be able to tell from what machine and\n"
"# what type of input device it originates.\n"
"string id\n"
;
  }

  static const char* value(const ::march_shared_msgs::Alive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::Alive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Alive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::Alive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::Alive_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_ALIVE_H
