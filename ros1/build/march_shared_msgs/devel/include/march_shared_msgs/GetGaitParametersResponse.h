// Generated by gencpp from file march_shared_msgs/GetGaitParametersResponse.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_GETGAITPARAMETERSRESPONSE_H
#define MARCH_SHARED_MSGS_MESSAGE_GETGAITPARAMETERSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <march_shared_msgs/GaitParameters.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct GetGaitParametersResponse_
{
  typedef GetGaitParametersResponse_<ContainerAllocator> Type;

  GetGaitParametersResponse_()
    : success(false)
    , error_message()
    , gait_parameters()  {
    }
  GetGaitParametersResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , error_message(_alloc)
    , gait_parameters(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_message_type;
  _error_message_type error_message;

   typedef  ::march_shared_msgs::GaitParameters_<ContainerAllocator>  _gait_parameters_type;
  _gait_parameters_type gait_parameters;





  typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGaitParametersResponse_

typedef ::march_shared_msgs::GetGaitParametersResponse_<std::allocator<void> > GetGaitParametersResponse;

typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersResponse > GetGaitParametersResponsePtr;
typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersResponse const> GetGaitParametersResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.error_message == rhs.error_message &&
    lhs.gait_parameters == rhs.gait_parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f2b5a156e1d9f3417ec7c9ad9668c72";
  }

  static const char* value(const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f2b5a156e1d9f34ULL;
  static const uint64_t static_value2 = 0x17ec7c9ad9668c72ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/GetGaitParametersResponse";
  }

  static const char* value(const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Whether a valid place to set the foot was found using the camera.\n"
"bool success\n"
"\n"
"# If success is false, this string should provide more information as to what went wrong\n"
"string error_message\n"
"\n"
"GaitParameters gait_parameters\n"
"\n"
"================================================================================\n"
"MSG: march_shared_msgs/GaitParameters\n"
"# The response should give the parameters that can be used for any\n"
"# parametric gait see https://confluence.projectmarch.nl:8443/display/62tech/Obstacles+analysis\n"
"# for more explanation about the range of heights and step sizes\n"
"\n"
"# Parameter that determines the step size,\n"
"# between 0 and 1, where 0 is the small step for this obstacle and\n"
"# 1 is the large step gait for this obstacle.\n"
"#\n"
"# Stairs: Min depth is 20 cm, max is ? cm\n"
"# Ramp: Will not be used for ramp up/down\n"
"float64 step_size_parameter\n"
"\n"
"\n"
"# Parameter that determines the height of the step to make,\n"
"# also between 0 and 1, where 0 is the low step for this obstacle and\n"
"# 1 is the high step gait for this obstacle.\n"
"#\n"
"# Stairs: Min height is 12 cm, max height is 22 cm\n"
"# Ramp: Min gradient is 5 degrees, max is  20 degrees\n"
"float64 step_height_parameter\n"
"\n"
"# Parameter that influences the amount the step should go sideways (using HAA mostly)\n"
"# for the step chosen by the realsense, between 0 and 1, where 0 is regular angle and 1\n"
"# is maximal sideways step for this obstacle. Currently, we have not implemented\n"
"# this in the gaits yet.\n"
"#\n"
"# Stairs: Not used yet, should always be 0\n"
"# Ramp: Not used yet, should always be 0\n"
"float64 side_step_parameter\n"
;
  }

  static const char* value(const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.error_message);
      stream.next(m.gait_parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGaitParametersResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::GetGaitParametersResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "error_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_message);
    s << indent << "gait_parameters: ";
    s << std::endl;
    Printer< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >::stream(s, indent + "  ", v.gait_parameters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_GETGAITPARAMETERSRESPONSE_H
