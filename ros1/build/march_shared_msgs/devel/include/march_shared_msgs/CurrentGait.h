// Generated by gencpp from file march_shared_msgs/CurrentGait.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_CURRENTGAIT_H
#define MARCH_SHARED_MSGS_MESSAGE_CURRENTGAIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct CurrentGait_
{
  typedef CurrentGait_<ContainerAllocator> Type;

  CurrentGait_()
    : header()
    , gait()
    , subgait()
    , version()
    , duration()
    , gait_type()  {
    }
  CurrentGait_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gait(_alloc)
    , subgait(_alloc)
    , version(_alloc)
    , duration()
    , gait_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gait_type;
  _gait_type gait;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _subgait_type;
  _subgait_type subgait;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _version_type;
  _version_type version;

   typedef ros::Duration _duration_type;
  _duration_type duration;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gait_type_type;
  _gait_type_type gait_type;





  typedef boost::shared_ptr< ::march_shared_msgs::CurrentGait_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::CurrentGait_<ContainerAllocator> const> ConstPtr;

}; // struct CurrentGait_

typedef ::march_shared_msgs::CurrentGait_<std::allocator<void> > CurrentGait;

typedef boost::shared_ptr< ::march_shared_msgs::CurrentGait > CurrentGaitPtr;
typedef boost::shared_ptr< ::march_shared_msgs::CurrentGait const> CurrentGaitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::CurrentGait_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::CurrentGait_<ContainerAllocator1> & lhs, const ::march_shared_msgs::CurrentGait_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.gait == rhs.gait &&
    lhs.subgait == rhs.subgait &&
    lhs.version == rhs.version &&
    lhs.duration == rhs.duration &&
    lhs.gait_type == rhs.gait_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::CurrentGait_<ContainerAllocator1> & lhs, const ::march_shared_msgs::CurrentGait_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::CurrentGait_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::CurrentGait_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::CurrentGait_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05545223cf87f9c70c68a04b825e8621";
  }

  static const char* value(const ::march_shared_msgs::CurrentGait_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05545223cf87f9c7ULL;
  static const uint64_t static_value2 = 0x0c68a04b825e8621ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/CurrentGait";
  }

  static const char* value(const ::march_shared_msgs::CurrentGait_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Gait name that is executing\n"
"string gait\n"
"# Subgait name that is executing, if the gait has subgaits, else empty string\n"
"string subgait\n"
"# Optional version name of the gait/subgait\n"
"string version\n"
"# Optional duration of the gait/subgait\n"
"duration duration\n"
"# Optional gait type name of the gait/subgait\n"
"string gait_type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::march_shared_msgs::CurrentGait_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gait);
      stream.next(m.subgait);
      stream.next(m.version);
      stream.next(m.duration);
      stream.next(m.gait_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CurrentGait_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::CurrentGait_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::CurrentGait_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gait: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gait);
    s << indent << "subgait: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.subgait);
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.version);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "gait_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gait_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_CURRENTGAIT_H
