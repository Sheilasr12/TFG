// Generated by gencpp from file march_shared_msgs/GaitParameters.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_GAITPARAMETERS_H
#define MARCH_SHARED_MSGS_MESSAGE_GAITPARAMETERS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct GaitParameters_
{
  typedef GaitParameters_<ContainerAllocator> Type;

  GaitParameters_()
    : step_size_parameter(0.0)
    , step_height_parameter(0.0)
    , side_step_parameter(0.0)  {
    }
  GaitParameters_(const ContainerAllocator& _alloc)
    : step_size_parameter(0.0)
    , step_height_parameter(0.0)
    , side_step_parameter(0.0)  {
  (void)_alloc;
    }



   typedef double _step_size_parameter_type;
  _step_size_parameter_type step_size_parameter;

   typedef double _step_height_parameter_type;
  _step_height_parameter_type step_height_parameter;

   typedef double _side_step_parameter_type;
  _side_step_parameter_type side_step_parameter;





  typedef boost::shared_ptr< ::march_shared_msgs::GaitParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::GaitParameters_<ContainerAllocator> const> ConstPtr;

}; // struct GaitParameters_

typedef ::march_shared_msgs::GaitParameters_<std::allocator<void> > GaitParameters;

typedef boost::shared_ptr< ::march_shared_msgs::GaitParameters > GaitParametersPtr;
typedef boost::shared_ptr< ::march_shared_msgs::GaitParameters const> GaitParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::GaitParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::GaitParameters_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GaitParameters_<ContainerAllocator2> & rhs)
{
  return lhs.step_size_parameter == rhs.step_size_parameter &&
    lhs.step_height_parameter == rhs.step_height_parameter &&
    lhs.side_step_parameter == rhs.side_step_parameter;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::GaitParameters_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GaitParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GaitParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GaitParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GaitParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea50f5a253178197d751aa1d6628b38f";
  }

  static const char* value(const ::march_shared_msgs::GaitParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea50f5a253178197ULL;
  static const uint64_t static_value2 = 0xd751aa1d6628b38fULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/GaitParameters";
  }

  static const char* value(const ::march_shared_msgs::GaitParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The response should give the parameters that can be used for any\n"
"# parametric gait see https://confluence.projectmarch.nl:8443/display/62tech/Obstacles+analysis\n"
"# for more explanation about the range of heights and step sizes\n"
"\n"
"# Parameter that determines the step size,\n"
"# between 0 and 1, where 0 is the small step for this obstacle and\n"
"# 1 is the large step gait for this obstacle.\n"
"#\n"
"# Stairs: Min depth is 20 cm, max is ? cm\n"
"# Ramp: Will not be used for ramp up/down\n"
"float64 step_size_parameter\n"
"\n"
"\n"
"# Parameter that determines the height of the step to make,\n"
"# also between 0 and 1, where 0 is the low step for this obstacle and\n"
"# 1 is the high step gait for this obstacle.\n"
"#\n"
"# Stairs: Min height is 12 cm, max height is 22 cm\n"
"# Ramp: Min gradient is 5 degrees, max is  20 degrees\n"
"float64 step_height_parameter\n"
"\n"
"# Parameter that influences the amount the step should go sideways (using HAA mostly)\n"
"# for the step chosen by the realsense, between 0 and 1, where 0 is regular angle and 1\n"
"# is maximal sideways step for this obstacle. Currently, we have not implemented\n"
"# this in the gaits yet.\n"
"#\n"
"# Stairs: Not used yet, should always be 0\n"
"# Ramp: Not used yet, should always be 0\n"
"float64 side_step_parameter\n"
;
  }

  static const char* value(const ::march_shared_msgs::GaitParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.step_size_parameter);
      stream.next(m.step_height_parameter);
      stream.next(m.side_step_parameter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GaitParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::GaitParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::GaitParameters_<ContainerAllocator>& v)
  {
    s << indent << "step_size_parameter: ";
    Printer<double>::stream(s, indent + "  ", v.step_size_parameter);
    s << indent << "step_height_parameter: ";
    Printer<double>::stream(s, indent + "  ", v.step_height_parameter);
    s << indent << "side_step_parameter: ";
    Printer<double>::stream(s, indent + "  ", v.side_step_parameter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_GAITPARAMETERS_H
