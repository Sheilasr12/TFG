// Generated by gencpp from file march_shared_msgs/ImcState.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_IMCSTATE_H
#define MARCH_SHARED_MSGS_MESSAGE_IMCSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct ImcState_
{
  typedef ImcState_<ContainerAllocator> Type;

  ImcState_()
    : header()
    , joint_names()
    , status_word()
    , detailed_error()
    , motion_error()
    , state()
    , detailed_error_description()
    , motion_error_description()
    , motor_current()
    , imc_voltage()
    , motor_voltage()
    , absolute_encoder_value()
    , incremental_encoder_value()
    , absolute_velocity()
    , incremental_velocity()  {
    }
  ImcState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_names(_alloc)
    , status_word(_alloc)
    , detailed_error(_alloc)
    , motion_error(_alloc)
    , state(_alloc)
    , detailed_error_description(_alloc)
    , motion_error_description(_alloc)
    , motor_current(_alloc)
    , imc_voltage(_alloc)
    , motor_voltage(_alloc)
    , absolute_encoder_value(_alloc)
    , incremental_encoder_value(_alloc)
    , absolute_velocity(_alloc)
    , incremental_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _status_word_type;
  _status_word_type status_word;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _detailed_error_type;
  _detailed_error_type detailed_error;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _motion_error_type;
  _motion_error_type motion_error;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _state_type;
  _state_type state;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _detailed_error_description_type;
  _detailed_error_description_type detailed_error_description;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _motion_error_description_type;
  _motion_error_description_type motion_error_description;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _motor_current_type;
  _motor_current_type motor_current;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _imc_voltage_type;
  _imc_voltage_type imc_voltage;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _motor_voltage_type;
  _motor_voltage_type motor_voltage;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _absolute_encoder_value_type;
  _absolute_encoder_value_type absolute_encoder_value;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _incremental_encoder_value_type;
  _incremental_encoder_value_type incremental_encoder_value;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _absolute_velocity_type;
  _absolute_velocity_type absolute_velocity;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _incremental_velocity_type;
  _incremental_velocity_type incremental_velocity;





  typedef boost::shared_ptr< ::march_shared_msgs::ImcState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::ImcState_<ContainerAllocator> const> ConstPtr;

}; // struct ImcState_

typedef ::march_shared_msgs::ImcState_<std::allocator<void> > ImcState;

typedef boost::shared_ptr< ::march_shared_msgs::ImcState > ImcStatePtr;
typedef boost::shared_ptr< ::march_shared_msgs::ImcState const> ImcStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::ImcState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::ImcState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::ImcState_<ContainerAllocator1> & lhs, const ::march_shared_msgs::ImcState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joint_names == rhs.joint_names &&
    lhs.status_word == rhs.status_word &&
    lhs.detailed_error == rhs.detailed_error &&
    lhs.motion_error == rhs.motion_error &&
    lhs.state == rhs.state &&
    lhs.detailed_error_description == rhs.detailed_error_description &&
    lhs.motion_error_description == rhs.motion_error_description &&
    lhs.motor_current == rhs.motor_current &&
    lhs.imc_voltage == rhs.imc_voltage &&
    lhs.motor_voltage == rhs.motor_voltage &&
    lhs.absolute_encoder_value == rhs.absolute_encoder_value &&
    lhs.incremental_encoder_value == rhs.incremental_encoder_value &&
    lhs.absolute_velocity == rhs.absolute_velocity &&
    lhs.incremental_velocity == rhs.incremental_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::ImcState_<ContainerAllocator1> & lhs, const ::march_shared_msgs::ImcState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::ImcState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::ImcState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::ImcState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::ImcState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::ImcState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::ImcState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::ImcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed4be4b991ee6e262d33c8b84a0ed150";
  }

  static const char* value(const ::march_shared_msgs::ImcState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed4be4b991ee6e26ULL;
  static const uint64_t static_value2 = 0x2d33c8b84a0ed150ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::ImcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/ImcState";
  }

  static const char* value(const ::march_shared_msgs::ImcState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::ImcState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string[] joint_names\n"
"string[] status_word\n"
"string[] detailed_error\n"
"string[] motion_error\n"
"string[] state\n"
"string[] detailed_error_description\n"
"string[] motion_error_description\n"
"float32[] motor_current\n"
"float32[] imc_voltage\n"
"float32[] motor_voltage\n"
"int32[] absolute_encoder_value\n"
"int32[] incremental_encoder_value\n"
"float32[] absolute_velocity\n"
"float32[] incremental_velocity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::march_shared_msgs::ImcState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::ImcState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_names);
      stream.next(m.status_word);
      stream.next(m.detailed_error);
      stream.next(m.motion_error);
      stream.next(m.state);
      stream.next(m.detailed_error_description);
      stream.next(m.motion_error_description);
      stream.next(m.motor_current);
      stream.next(m.imc_voltage);
      stream.next(m.motor_voltage);
      stream.next(m.absolute_encoder_value);
      stream.next(m.incremental_encoder_value);
      stream.next(m.absolute_velocity);
      stream.next(m.incremental_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImcState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::ImcState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::ImcState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "status_word[]" << std::endl;
    for (size_t i = 0; i < v.status_word.size(); ++i)
    {
      s << indent << "  status_word[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_word[i]);
    }
    s << indent << "detailed_error[]" << std::endl;
    for (size_t i = 0; i < v.detailed_error.size(); ++i)
    {
      s << indent << "  detailed_error[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detailed_error[i]);
    }
    s << indent << "motion_error[]" << std::endl;
    for (size_t i = 0; i < v.motion_error.size(); ++i)
    {
      s << indent << "  motion_error[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion_error[i]);
    }
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "detailed_error_description[]" << std::endl;
    for (size_t i = 0; i < v.detailed_error_description.size(); ++i)
    {
      s << indent << "  detailed_error_description[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detailed_error_description[i]);
    }
    s << indent << "motion_error_description[]" << std::endl;
    for (size_t i = 0; i < v.motion_error_description.size(); ++i)
    {
      s << indent << "  motion_error_description[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motion_error_description[i]);
    }
    s << indent << "motor_current[]" << std::endl;
    for (size_t i = 0; i < v.motor_current.size(); ++i)
    {
      s << indent << "  motor_current[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motor_current[i]);
    }
    s << indent << "imc_voltage[]" << std::endl;
    for (size_t i = 0; i < v.imc_voltage.size(); ++i)
    {
      s << indent << "  imc_voltage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.imc_voltage[i]);
    }
    s << indent << "motor_voltage[]" << std::endl;
    for (size_t i = 0; i < v.motor_voltage.size(); ++i)
    {
      s << indent << "  motor_voltage[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.motor_voltage[i]);
    }
    s << indent << "absolute_encoder_value[]" << std::endl;
    for (size_t i = 0; i < v.absolute_encoder_value.size(); ++i)
    {
      s << indent << "  absolute_encoder_value[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.absolute_encoder_value[i]);
    }
    s << indent << "incremental_encoder_value[]" << std::endl;
    for (size_t i = 0; i < v.incremental_encoder_value.size(); ++i)
    {
      s << indent << "  incremental_encoder_value[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.incremental_encoder_value[i]);
    }
    s << indent << "absolute_velocity[]" << std::endl;
    for (size_t i = 0; i < v.absolute_velocity.size(); ++i)
    {
      s << indent << "  absolute_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.absolute_velocity[i]);
    }
    s << indent << "incremental_velocity[]" << std::endl;
    for (size_t i = 0; i < v.incremental_velocity.size(); ++i)
    {
      s << indent << "  incremental_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.incremental_velocity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_IMCSTATE_H
