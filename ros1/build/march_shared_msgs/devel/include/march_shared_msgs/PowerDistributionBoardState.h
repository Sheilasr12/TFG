// Generated by gencpp from file march_shared_msgs/PowerDistributionBoardState.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_POWERDISTRIBUTIONBOARDSTATE_H
#define MARCH_SHARED_MSGS_MESSAGE_POWERDISTRIBUTIONBOARDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <march_shared_msgs/LowVoltageNet.h>
#include <march_shared_msgs/HighVoltageNet.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct PowerDistributionBoardState_
{
  typedef PowerDistributionBoardState_<ContainerAllocator> Type;

  PowerDistributionBoardState_()
    : header()
    , high_voltage_enabled(false)
    , power_distribution_board_current(0.0)
    , high_voltage_net_current(0.0)
    , master_shutdown_requested(false)
    , low_voltage_nets()
    , high_voltage_nets()  {
    }
  PowerDistributionBoardState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , high_voltage_enabled(false)
    , power_distribution_board_current(0.0)
    , high_voltage_net_current(0.0)
    , master_shutdown_requested(false)
    , low_voltage_nets(_alloc)
    , high_voltage_nets(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _high_voltage_enabled_type;
  _high_voltage_enabled_type high_voltage_enabled;

   typedef float _power_distribution_board_current_type;
  _power_distribution_board_current_type power_distribution_board_current;

   typedef float _high_voltage_net_current_type;
  _high_voltage_net_current_type high_voltage_net_current;

   typedef uint8_t _master_shutdown_requested_type;
  _master_shutdown_requested_type master_shutdown_requested;

   typedef std::vector< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >::other >  _low_voltage_nets_type;
  _low_voltage_nets_type low_voltage_nets;

   typedef std::vector< ::march_shared_msgs::HighVoltageNet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::march_shared_msgs::HighVoltageNet_<ContainerAllocator> >::other >  _high_voltage_nets_type;
  _high_voltage_nets_type high_voltage_nets;





  typedef boost::shared_ptr< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> const> ConstPtr;

}; // struct PowerDistributionBoardState_

typedef ::march_shared_msgs::PowerDistributionBoardState_<std::allocator<void> > PowerDistributionBoardState;

typedef boost::shared_ptr< ::march_shared_msgs::PowerDistributionBoardState > PowerDistributionBoardStatePtr;
typedef boost::shared_ptr< ::march_shared_msgs::PowerDistributionBoardState const> PowerDistributionBoardStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator1> & lhs, const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.high_voltage_enabled == rhs.high_voltage_enabled &&
    lhs.power_distribution_board_current == rhs.power_distribution_board_current &&
    lhs.high_voltage_net_current == rhs.high_voltage_net_current &&
    lhs.master_shutdown_requested == rhs.master_shutdown_requested &&
    lhs.low_voltage_nets == rhs.low_voltage_nets &&
    lhs.high_voltage_nets == rhs.high_voltage_nets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator1> & lhs, const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ff720814f62ef92954d191a316aeaf3";
  }

  static const char* value(const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ff720814f62ef92ULL;
  static const uint64_t static_value2 = 0x954d191a316aeaf3ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/PowerDistributionBoardState";
  }

  static const char* value(const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"bool high_voltage_enabled\n"
"\n"
"# The current consumed by the power distribution board.\n"
"float32 power_distribution_board_current\n"
"\n"
"# The total current of all high voltage nets combined.\n"
"float32 high_voltage_net_current\n"
"\n"
"# The request of the power distribution board to shutdown the master.\n"
"bool master_shutdown_requested\n"
"\n"
"LowVoltageNet[] low_voltage_nets\n"
"HighVoltageNet[] high_voltage_nets\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: march_shared_msgs/LowVoltageNet\n"
"#used in message PowerDistributionBoardState\n"
"string name\n"
"bool operational\n"
"float32 current\n"
"\n"
"================================================================================\n"
"MSG: march_shared_msgs/HighVoltageNet\n"
"#used in message PowerDistributionBoardState\n"
"string name\n"
"bool operational\n"
"bool overcurrent_triggered\n"
;
  }

  static const char* value(const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.high_voltage_enabled);
      stream.next(m.power_distribution_board_current);
      stream.next(m.high_voltage_net_current);
      stream.next(m.master_shutdown_requested);
      stream.next(m.low_voltage_nets);
      stream.next(m.high_voltage_nets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerDistributionBoardState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::PowerDistributionBoardState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "high_voltage_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_voltage_enabled);
    s << indent << "power_distribution_board_current: ";
    Printer<float>::stream(s, indent + "  ", v.power_distribution_board_current);
    s << indent << "high_voltage_net_current: ";
    Printer<float>::stream(s, indent + "  ", v.high_voltage_net_current);
    s << indent << "master_shutdown_requested: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.master_shutdown_requested);
    s << indent << "low_voltage_nets[]" << std::endl;
    for (size_t i = 0; i < v.low_voltage_nets.size(); ++i)
    {
      s << indent << "  low_voltage_nets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::march_shared_msgs::LowVoltageNet_<ContainerAllocator> >::stream(s, indent + "    ", v.low_voltage_nets[i]);
    }
    s << indent << "high_voltage_nets[]" << std::endl;
    for (size_t i = 0; i < v.high_voltage_nets.size(); ++i)
    {
      s << indent << "  high_voltage_nets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::march_shared_msgs::HighVoltageNet_<ContainerAllocator> >::stream(s, indent + "    ", v.high_voltage_nets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_POWERDISTRIBUTIONBOARDSTATE_H
