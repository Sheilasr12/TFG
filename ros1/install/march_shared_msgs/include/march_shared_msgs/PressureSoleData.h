// Generated by gencpp from file march_shared_msgs/PressureSoleData.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_PRESSURESOLEDATA_H
#define MARCH_SHARED_MSGS_MESSAGE_PRESSURESOLEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct PressureSoleData_
{
  typedef PressureSoleData_<ContainerAllocator> Type;

  PressureSoleData_()
    : side()
    , heel_right(0.0)
    , heel_left(0.0)
    , met1(0.0)
    , hallux(0.0)
    , met3(0.0)
    , toes(0.0)
    , met5(0.0)
    , arch(0.0)  {
    }
  PressureSoleData_(const ContainerAllocator& _alloc)
    : side(_alloc)
    , heel_right(0.0)
    , heel_left(0.0)
    , met1(0.0)
    , hallux(0.0)
    , met3(0.0)
    , toes(0.0)
    , met5(0.0)
    , arch(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _side_type;
  _side_type side;

   typedef float _heel_right_type;
  _heel_right_type heel_right;

   typedef float _heel_left_type;
  _heel_left_type heel_left;

   typedef float _met1_type;
  _met1_type met1;

   typedef float _hallux_type;
  _hallux_type hallux;

   typedef float _met3_type;
  _met3_type met3;

   typedef float _toes_type;
  _toes_type toes;

   typedef float _met5_type;
  _met5_type met5;

   typedef float _arch_type;
  _arch_type arch;





  typedef boost::shared_ptr< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> const> ConstPtr;

}; // struct PressureSoleData_

typedef ::march_shared_msgs::PressureSoleData_<std::allocator<void> > PressureSoleData;

typedef boost::shared_ptr< ::march_shared_msgs::PressureSoleData > PressureSoleDataPtr;
typedef boost::shared_ptr< ::march_shared_msgs::PressureSoleData const> PressureSoleDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::PressureSoleData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::PressureSoleData_<ContainerAllocator1> & lhs, const ::march_shared_msgs::PressureSoleData_<ContainerAllocator2> & rhs)
{
  return lhs.side == rhs.side &&
    lhs.heel_right == rhs.heel_right &&
    lhs.heel_left == rhs.heel_left &&
    lhs.met1 == rhs.met1 &&
    lhs.hallux == rhs.hallux &&
    lhs.met3 == rhs.met3 &&
    lhs.toes == rhs.toes &&
    lhs.met5 == rhs.met5 &&
    lhs.arch == rhs.arch;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::PressureSoleData_<ContainerAllocator1> & lhs, const ::march_shared_msgs::PressureSoleData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f778afef2a62daf4a25bbc0aa80cca01";
  }

  static const char* value(const ::march_shared_msgs::PressureSoleData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf778afef2a62daf4ULL;
  static const uint64_t static_value2 = 0xa25bbc0aa80cca01ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/PressureSoleData";
  }

  static const char* value(const ::march_shared_msgs::PressureSoleData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string side\n"
"float32 heel_right\n"
"float32 heel_left\n"
"float32 met1\n"
"float32 hallux\n"
"float32 met3\n"
"float32 toes\n"
"float32 met5\n"
"float32 arch\n"
;
  }

  static const char* value(const ::march_shared_msgs::PressureSoleData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.side);
      stream.next(m.heel_right);
      stream.next(m.heel_left);
      stream.next(m.met1);
      stream.next(m.hallux);
      stream.next(m.met3);
      stream.next(m.toes);
      stream.next(m.met5);
      stream.next(m.arch);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressureSoleData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::PressureSoleData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::PressureSoleData_<ContainerAllocator>& v)
  {
    s << indent << "side: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.side);
    s << indent << "heel_right: ";
    Printer<float>::stream(s, indent + "  ", v.heel_right);
    s << indent << "heel_left: ";
    Printer<float>::stream(s, indent + "  ", v.heel_left);
    s << indent << "met1: ";
    Printer<float>::stream(s, indent + "  ", v.met1);
    s << indent << "hallux: ";
    Printer<float>::stream(s, indent + "  ", v.hallux);
    s << indent << "met3: ";
    Printer<float>::stream(s, indent + "  ", v.met3);
    s << indent << "toes: ";
    Printer<float>::stream(s, indent + "  ", v.toes);
    s << indent << "met5: ";
    Printer<float>::stream(s, indent + "  ", v.met5);
    s << indent << "arch: ";
    Printer<float>::stream(s, indent + "  ", v.arch);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_PRESSURESOLEDATA_H
