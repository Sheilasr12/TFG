// Generated by gencpp from file march_shared_msgs/PressureSole.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_PRESSURESOLE_H
#define MARCH_SHARED_MSGS_MESSAGE_PRESSURESOLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct PressureSole_
{
  typedef PressureSole_<ContainerAllocator> Type;

  PressureSole_()
    : header()
    , pressure_soles_time()
    , total_force_left(0.0)
    , total_force_right(0.0)
    , pressure_left()
    , pressure_right()
    , cop_left()
    , cop_right()  {
    }
  PressureSole_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pressure_soles_time()
    , total_force_left(0.0)
    , total_force_right(0.0)
    , pressure_left(_alloc)
    , pressure_right(_alloc)
    , cop_left(_alloc)
    , cop_right(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef ros::Time _pressure_soles_time_type;
  _pressure_soles_time_type pressure_soles_time;

   typedef float _total_force_left_type;
  _total_force_left_type total_force_left;

   typedef float _total_force_right_type;
  _total_force_right_type total_force_right;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pressure_left_type;
  _pressure_left_type pressure_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pressure_right_type;
  _pressure_right_type pressure_right;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cop_left_type;
  _cop_left_type cop_left;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cop_right_type;
  _cop_right_type cop_right;





  typedef boost::shared_ptr< ::march_shared_msgs::PressureSole_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::PressureSole_<ContainerAllocator> const> ConstPtr;

}; // struct PressureSole_

typedef ::march_shared_msgs::PressureSole_<std::allocator<void> > PressureSole;

typedef boost::shared_ptr< ::march_shared_msgs::PressureSole > PressureSolePtr;
typedef boost::shared_ptr< ::march_shared_msgs::PressureSole const> PressureSoleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::PressureSole_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::PressureSole_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::PressureSole_<ContainerAllocator1> & lhs, const ::march_shared_msgs::PressureSole_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pressure_soles_time == rhs.pressure_soles_time &&
    lhs.total_force_left == rhs.total_force_left &&
    lhs.total_force_right == rhs.total_force_right &&
    lhs.pressure_left == rhs.pressure_left &&
    lhs.pressure_right == rhs.pressure_right &&
    lhs.cop_left == rhs.cop_left &&
    lhs.cop_right == rhs.cop_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::PressureSole_<ContainerAllocator1> & lhs, const ::march_shared_msgs::PressureSole_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::PressureSole_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::PressureSole_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::PressureSole_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13b27f467193798354308188ddb84202";
  }

  static const char* value(const ::march_shared_msgs::PressureSole_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13b27f4671937983ULL;
  static const uint64_t static_value2 = 0x54308188ddb84202ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/PressureSole";
  }

  static const char* value(const ::march_shared_msgs::PressureSole_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# belonging to filter in Moticon software: \"force pressure cop\"\n"
"Header header\n"
"time pressure_soles_time\n"
"float32 total_force_left\n"
"float32 total_force_right\n"
"float32[] pressure_left\n"
"float32[] pressure_right\n"
"float32[] cop_left\n"
"float32[] cop_right\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::march_shared_msgs::PressureSole_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pressure_soles_time);
      stream.next(m.total_force_left);
      stream.next(m.total_force_right);
      stream.next(m.pressure_left);
      stream.next(m.pressure_right);
      stream.next(m.cop_left);
      stream.next(m.cop_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressureSole_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::PressureSole_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::PressureSole_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pressure_soles_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.pressure_soles_time);
    s << indent << "total_force_left: ";
    Printer<float>::stream(s, indent + "  ", v.total_force_left);
    s << indent << "total_force_right: ";
    Printer<float>::stream(s, indent + "  ", v.total_force_right);
    s << indent << "pressure_left[]" << std::endl;
    for (size_t i = 0; i < v.pressure_left.size(); ++i)
    {
      s << indent << "  pressure_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pressure_left[i]);
    }
    s << indent << "pressure_right[]" << std::endl;
    for (size_t i = 0; i < v.pressure_right.size(); ++i)
    {
      s << indent << "  pressure_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pressure_right[i]);
    }
    s << indent << "cop_left[]" << std::endl;
    for (size_t i = 0; i < v.cop_left.size(); ++i)
    {
      s << indent << "  cop_left[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cop_left[i]);
    }
    s << indent << "cop_right[]" << std::endl;
    for (size_t i = 0; i < v.cop_right.size(); ++i)
    {
      s << indent << "  cop_right[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cop_right[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_PRESSURESOLE_H
