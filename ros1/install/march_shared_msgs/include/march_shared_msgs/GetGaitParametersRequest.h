// Generated by gencpp from file march_shared_msgs/GetGaitParametersRequest.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_GETGAITPARAMETERSREQUEST_H
#define MARCH_SHARED_MSGS_MESSAGE_GETGAITPARAMETERSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace march_shared_msgs
{
template <class ContainerAllocator>
struct GetGaitParametersRequest_
{
  typedef GetGaitParametersRequest_<ContainerAllocator> Type;

  GetGaitParametersRequest_()
    : selected_gait(0)  {
    }
  GetGaitParametersRequest_(const ContainerAllocator& _alloc)
    : selected_gait(0)  {
  (void)_alloc;
    }



   typedef uint8_t _selected_gait_type;
  _selected_gait_type selected_gait;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STAIRS_UP)
  #undef STAIRS_UP
#endif
#if defined(_WIN32) && defined(STAIRS_DOWN)
  #undef STAIRS_DOWN
#endif
#if defined(_WIN32) && defined(RAMP_UP)
  #undef RAMP_UP
#endif
#if defined(_WIN32) && defined(RAMP_DOWN)
  #undef RAMP_DOWN
#endif

  enum {
    STAIRS_UP = 0u,
    STAIRS_DOWN = 1u,
    RAMP_UP = 2u,
    RAMP_DOWN = 3u,
  };


  typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetGaitParametersRequest_

typedef ::march_shared_msgs::GetGaitParametersRequest_<std::allocator<void> > GetGaitParametersRequest;

typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersRequest > GetGaitParametersRequestPtr;
typedef boost::shared_ptr< ::march_shared_msgs::GetGaitParametersRequest const> GetGaitParametersRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator2> & rhs)
{
  return lhs.selected_gait == rhs.selected_gait;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator1> & lhs, const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab1f7ebdb373b97c4db8ef5d68105bad";
  }

  static const char* value(const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab1f7ebdb373b97cULL;
  static const uint64_t static_value2 = 0x4db8ef5d68105badULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/GetGaitParametersRequest";
  }

  static const char* value(const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This enum is used for specifying the obstacle that should be dynamically\n"
"# made with the RealSense camera. All supported obstacles should be\n"
"# specified here\n"
"uint8 STAIRS_UP=0\n"
"uint8 STAIRS_DOWN=1\n"
"uint8 RAMP_UP=2\n"
"uint8 RAMP_DOWN=3\n"
"uint8 selected_gait\n"
;
  }

  static const char* value(const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.selected_gait);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGaitParametersRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::GetGaitParametersRequest_<ContainerAllocator>& v)
  {
    s << indent << "selected_gait: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.selected_gait);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_GETGAITPARAMETERSREQUEST_H
