// Generated by gencpp from file march_shared_msgs/CapturePointPoseResponse.msg
// DO NOT EDIT!


#ifndef MARCH_SHARED_MSGS_MESSAGE_CAPTUREPOINTPOSERESPONSE_H
#define MARCH_SHARED_MSGS_MESSAGE_CAPTUREPOINTPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace march_shared_msgs
{
template <class ContainerAllocator>
struct CapturePointPoseResponse_
{
  typedef CapturePointPoseResponse_<ContainerAllocator> Type;

  CapturePointPoseResponse_()
    : success(false)
    , duration(0.0)
    , capture_point()  {
    }
  CapturePointPoseResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , duration(0.0)
    , capture_point(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef double _duration_type;
  _duration_type duration;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _capture_point_type;
  _capture_point_type capture_point;





  typedef boost::shared_ptr< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CapturePointPoseResponse_

typedef ::march_shared_msgs::CapturePointPoseResponse_<std::allocator<void> > CapturePointPoseResponse;

typedef boost::shared_ptr< ::march_shared_msgs::CapturePointPoseResponse > CapturePointPoseResponsePtr;
typedef boost::shared_ptr< ::march_shared_msgs::CapturePointPoseResponse const> CapturePointPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator1> & lhs, const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.duration == rhs.duration &&
    lhs.capture_point == rhs.capture_point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator1> & lhs, const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace march_shared_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b61318011b94ca2af6e372bb1921706";
  }

  static const char* value(const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b61318011b94ca2ULL;
  static const uint64_t static_value2 = 0xaf6e372bb1921706ULL;
};

template<class ContainerAllocator>
struct DataType< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "march_shared_msgs/CapturePointPoseResponse";
  }

  static const char* value(const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"float64 duration\n"
"geometry_msgs/Pose capture_point\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.duration);
      stream.next(m.capture_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CapturePointPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::march_shared_msgs::CapturePointPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "capture_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.capture_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARCH_SHARED_MSGS_MESSAGE_CAPTUREPOINTPOSERESPONSE_H
