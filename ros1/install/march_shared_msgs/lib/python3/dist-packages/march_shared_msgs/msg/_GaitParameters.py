# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from march_shared_msgs/GaitParameters.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GaitParameters(genpy.Message):
  _md5sum = "ea50f5a253178197d751aa1d6628b38f"
  _type = "march_shared_msgs/GaitParameters"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The response should give the parameters that can be used for any
# parametric gait see https://confluence.projectmarch.nl:8443/display/62tech/Obstacles+analysis
# for more explanation about the range of heights and step sizes

# Parameter that determines the step size,
# between 0 and 1, where 0 is the small step for this obstacle and
# 1 is the large step gait for this obstacle.
#
# Stairs: Min depth is 20 cm, max is ? cm
# Ramp: Will not be used for ramp up/down
float64 step_size_parameter


# Parameter that determines the height of the step to make,
# also between 0 and 1, where 0 is the low step for this obstacle and
# 1 is the high step gait for this obstacle.
#
# Stairs: Min height is 12 cm, max height is 22 cm
# Ramp: Min gradient is 5 degrees, max is  20 degrees
float64 step_height_parameter

# Parameter that influences the amount the step should go sideways (using HAA mostly)
# for the step chosen by the realsense, between 0 and 1, where 0 is regular angle and 1
# is maximal sideways step for this obstacle. Currently, we have not implemented
# this in the gaits yet.
#
# Stairs: Not used yet, should always be 0
# Ramp: Not used yet, should always be 0
float64 side_step_parameter"""
  __slots__ = ['step_size_parameter','step_height_parameter','side_step_parameter']
  _slot_types = ['float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       step_size_parameter,step_height_parameter,side_step_parameter

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GaitParameters, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.step_size_parameter is None:
        self.step_size_parameter = 0.
      if self.step_height_parameter is None:
        self.step_height_parameter = 0.
      if self.side_step_parameter is None:
        self.side_step_parameter = 0.
    else:
      self.step_size_parameter = 0.
      self.step_height_parameter = 0.
      self.side_step_parameter = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.step_size_parameter, _x.step_height_parameter, _x.side_step_parameter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.step_size_parameter, _x.step_height_parameter, _x.side_step_parameter,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d().pack(_x.step_size_parameter, _x.step_height_parameter, _x.side_step_parameter))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.step_size_parameter, _x.step_height_parameter, _x.side_step_parameter,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
